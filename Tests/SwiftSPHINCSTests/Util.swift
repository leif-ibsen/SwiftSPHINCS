//
//  Util.swift
//  
//
//  Created by Leif Ibsen on 07/12/2023.
//

import XCTest
@testable import SwiftSPHINCS
import Digest

final class Util: XCTestCase {

    static func hex2bytes(_ x: String) -> Bytes {
        let b = [Byte](x.utf8)
        var bytes = Bytes(repeating: 0, count: b.count / 2)
        for i in 0 ..< bytes.count {
            let b0 = b[2 * i]
            let b1 = b[2 * i + 1]
            bytes[i] = ((b0 > 57 ? b0 - 97 + 10 : b0 - 48) << 4) | (b1 > 57 ? b1 - 97 + 10 : b1 - 48)
        }
        return bytes
    }
    
    static func bytes2hex(_ x: Bytes) -> String {
        let hexDigits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]
        var s = ""
        for b in x {
            s.append(hexDigits[Int(b >> 4)])
            s.append(hexDigits[Int(b & 0xf)])
        }
        return s
    }

    static func toInt(_ x: String) -> Int {
        var r = 0
        for s in x {
            r *= 10
            r += Int(s.asciiValue!) - 48
        }
        return r
    }

    struct katTest {
        let seed: Bytes
        let mlen: Int
        let msg: Bytes
        let pk: Bytes
        let sk: Bytes
        let smlen: Int
        let smdigest: Bytes
    }
    
    
    // KAT test vectors generated by the Python project: https://github.com/mjosaarinen/slh-dsa-py
    
    static func makeKatTests(_ katTests: inout [katTest], _ data: Data) {
        let s = String(decoding: data, as: UTF8.self)
        var lines = s.components(separatedBy: .newlines)
        let groups = lines.count / 9
        for i in 0 ..< groups {
            let j = i * 9
            lines[j + 1].removeFirst(7)
            lines[j + 2].removeFirst(7)
            lines[j + 3].removeFirst(6)
            lines[j + 4].removeFirst(5)
            lines[j + 5].removeFirst(5)
            lines[j + 6].removeFirst(8)
            lines[j + 7].removeFirst(11)
        }
        for i in 0 ..< groups {
            let j = i * 9
            let seed = hex2bytes(lines[j + 1])
            let mlen = toInt(lines[j + 2])
            let msg = hex2bytes(lines[j + 3])
            let pk = hex2bytes(lines[j + 4])
            let sk = hex2bytes(lines[j + 5])
            let smlen = toInt(lines[j + 6])
            let smdigest = hex2bytes(lines[j + 7])
            katTests.append(katTest(seed: seed, mlen: mlen, msg: msg, pk: pk, sk: sk, smlen: smlen, smdigest: smdigest))
        }
    }

    static func doKATTest(_ kind: SPHINCSKind, _ tests: [Util.katTest]) {
        let sphincs = SPHINCS(kind: kind)
        let md = MessageDigest(.SHA2_256)
        for t in tests {
            let rnd = DRBG(t.seed).randomBytes(3 * sphincs.param.n)
            let (skKey, pkKey) = sphincs.slhKeyGen(rnd)
            XCTAssertEqual(skKey, t.sk)
            XCTAssertEqual(pkKey, t.pk)
            let sig = sphincs.slhSign(t.msg, skKey, false)
            XCTAssertEqual(t.msg.count, t.mlen)
            XCTAssertEqual(sig.count + t.msg.count, t.smlen)
            md.update(sig)
            md.update(t.msg)
            XCTAssertEqual(md.digest(), t.smdigest)
            XCTAssertTrue(sphincs.slhVerify(t.msg, sig, pkKey))
        }
    }

}
